name: 'Terraform'

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest    

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./iac/staging
        
    env:
      TERRAFORM_BACKEND_RESOURCE_GROUP: rg-terraform-staging
      TERRAFORM_BACKEND_STORAGE_ACCOUNT: stterraformstg001
      TERRAFORM_BACKEND_CONTAINER_NAME: realworld
      TF_VAR_aks_service_principal_client_id: ${{ secrets.AKS_CLIENT_ID }}
      TF_VAR_aks_service_principal_client_secret: ${{ secrets.AKS_CLIENT_SECRET }}
      ARM_CLIENT_ID: ${{ secrets.PIPELINE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.PIPELINE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.PIPELINE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.PIPELINE_TENANT_ID }}  

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false
    
    - name: Azure Login
      uses: Azure/login@v1
      with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure CLI Action
      id: terraform-setup
      uses: Azure/cli@v1.0.0
      with:
        # Specify the script here
        inlineScript: |
          az group create --location eastus --name ${{ env.TERRAFORM_BACKEND_RESOURCE_GROUP }}
      
          az storage account create --name ${{ env.TERRAFORM_BACKEND_STORAGE_ACCOUNT }} --resource-group ${{ env.TERRAFORM_BACKEND_RESOURCE_GROUP }} --location eastus --sku Standard_LRS

          az storage container create --name ${{ env.TERRAFORM_BACKEND_CONTAINER_NAME }} --account-name ${{ env.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}

          STORAGE_ACCOUNT_KEY=$(az storage account keys list -g ${{ env.TERRAFORM_BACKEND_RESOURCE_GROUP }} -n ${{ env.TERRAFORM_BACKEND_STORAGE_ACCOUNT }} | jq ".[0].value" -r)

          echo "setting storage account key variable"
          echo "::set-output name=ARM_ACCESS_KEY::$STORAGE_ACCOUNT_KEY issecret=true"
          
        # Azure CLI version to be used to execute the script. If not provided, latest version is used
        azcliversion: latest
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        ARM_ACCESS_KEY: ${{ steps.terraform-setup.outputs.ARM_ACCESS_KEY }} 

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      env:
        ARM_ACCESS_KEY: ${{ steps.terraform-setup.outputs.ARM_ACCESS_KEY }}

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve

    - name: Helm 
      run: helm

    - name: Azure CLI add azure arc
      run: |
        az extension add --name connectedk8s
        az extension add --name k8sconfiguration


    

