# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the master branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches:
    - master
    paths: 
      - iac/*
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest    

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./iac/staging
        
    env:
      TERRAFORM_BACKEND_RESOURCE_GROUP: rg-terraform-staging
      TERRAFORM_BACKEND_STORAGE_ACCOUNT: stterraformstg001
      TERRAFORM_BACKEND_CONTAINER_NAME: staging  

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false
    
    - name: Azure Login
      uses: Azure/login@v1
      with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure CLI Action
      uses: Azure/cli@v1.0.0
      with:
        
        # Specify the script here
        inlineScript: |
          az group create --location eastus --name ${{ env.TERRAFORM_BACKEND_RESOURCE_GROUP }}
      
          az storage account create --name ${{ env.TERRAFORM_BACKEND_STORAGE_ACCOUNT }} --resource-group ${{ env.TERRAFORM_BACKEND_RESOURCE_GROUP }} --location eastus --sku Standard_LRS

          az storage container create --name ${{ env.TERRAFORM_BACKEND_CONTAINER_NAME }} --account-name ${{ env.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}

          STORAGE_ACCOUNT_KEY=$(az storage account keys list -g ${{ env.TERRAFORM_BACKEND_RESOURCE_GROUP }} -n ${{ env.TERRAFORM_BACKEND_STORAGE_ACCOUNT }} | jq ".[0].value" -r)

          echo "setting storage account key variable"
          echo "::set-env name=ARM_ACCESS_KEY::$STORAGE_ACCOUNT_KEY"
          
        # Azure CLI version to be used to execute the script. If not provided, latest version is used
        azcliversion: latest
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve
