trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables: 
 - name: TerraformBackend.ResourceGroup
   value: rg-realworld-staging-001
 - name: TerraformBackend.StorageAccount
   value: strwstagingterraform01
 - name: TerraformBackend.ContainerName
   value: staging
 - group: 'staging'
 - group: 'global'
 - name: LinkerdVersion
   value: stable-2.7.0
 - name: system.debug
   value: true
steps:
- task: AzureCLI@2
  inputs:
    azureSubscription: 'nebbia-partner-service-connection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az group create --location eastus --name $(TerraformBackend.ResourceGroup)
      
      az storage account create --name $(TerraformBackend.StorageAccount) --resource-group $(TerraformBackend.ResourceGroup) --location eastus --sku Standard_LRS
      
      az storage container create --name $(TerraformBackend.ContainerName) --account-name $(TerraformBackend.StorageAccount)

      STORAGE_ACCOUNT_KEY=$(az storage account keys list -g $(TerraformBackend.ResourceGroup) -n $(TerraformBackend.StorageAccount) | jq ".[0].value" -r)

      echo "setting storage account key variable"
      echo "##vso[task.setvariable variable=ARM_ACCESS_KEY;issecret=true]$STORAGE_ACCOUNT_KEY"
- task: TerraformInstaller@0
  inputs:
    terraformVersion: '0.12.20'
- task: HelmInstaller@1
  inputs:
    helmVersionToInstall: 'latest'
- task: TerraformTaskV1@0
  displayName: "Terraform Init"
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'nebbia-partner-service-connection'
    backendAzureRmResourceGroupName: $(TerraformBackend.ResourceGroup)
    backendAzureRmStorageAccountName: $(TerraformBackend.StorageAccount)
    backendAzureRmContainerName: '$(TerraformBackend.ContainerName)'
    backendAzureRmKey: 'global/terraform.tfstate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/iac/global'
- task: TerraformTaskV1@0
  displayName: "Terraform Plan"
  inputs:
    provider: 'azurerm'
    command: 'plan'
    environmentServiceNameAzureRM: 'nebbia-partner-service-connection'
    backendAzureRmResourceGroupName: $(TerraformBackend.ResourceGroup)
    backendAzureRmStorageAccountName: $(TerraformBackend.StorageAccount)
    backendAzureRmContainerName: '$(TerraformBackend.ContainerName)'
    backendAzureRmKey: 'global/terraform.tfstate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/iac/global'
    commandOptions: ''
- task: TerraformTaskV1@0
  name: TerraformRegistry
  displayName: "Terraform Apply Container Registry"
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/iac/global/'
    environmentServiceNameAzureRM: 'nebbia-partner-service-connection'
- bash: |
    ACR_RESOURCE_ID=$(cat $(TerraformRegistry.jsonOutputVariablesPath) | jq '.acr_resource_id.value' -r)
    echo "resource id $ACR_RESOURCE_ID"
    echo "##vso[task.setvariable variable=ACR_RESOURCE_ID]$ACR_RESOURCE_ID"
  displayName: "Parsing Terraform Outputs"
- task: TerraformTaskV1@0
  displayName: "Terraform Init"
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'nebbia-partner-service-connection'
    backendAzureRmResourceGroupName: $(TerraformBackend.ResourceGroup)
    backendAzureRmStorageAccountName: $(TerraformBackend.StorageAccount)
    backendAzureRmContainerName: '$(TerraformBackend.ContainerName)'
    backendAzureRmKey: 'infrastructure/terraform.tfstate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/iac/staging'
- task: TerraformTaskV1@0
  displayName: "Terraform Plan"
  inputs:
    provider: 'azurerm'
    command: 'plan'
    environmentServiceNameAzureRM: 'nebbia-partner-service-connection'
    backendAzureRmResourceGroupName: $(TerraformBackend.ResourceGroup)
    backendAzureRmStorageAccountName: $(TerraformBackend.StorageAccount)
    backendAzureRmContainerName: '$(TerraformBackend.ContainerName)'
    backendAzureRmKey: 'infrastructure/terraform.tfstate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/iac/staging'
    commandOptions: |
      -var "aks_service_principal_client_id=$(KubernetesServicePrincipal.ClientId)" -var "aks_service_principal_client_secret=$(KubernetesServicePrincipal.ClientSecret)" -var "acr_resource_id=$(ACR_RESOURCE_ID)"
- task: TerraformTaskV1@0
  name: TerraformCluster
  displayName: "Terraform Apply Staging"
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/iac/staging/'
    environmentServiceNameAzureRM: 'nebbia-partner-service-connection'
    commandOptions: |
      -var "aks_service_principal_client_id=$(KubernetesServicePrincipal.ClientId)" -var "aks_service_principal_client_secret=$(KubernetesServicePrincipal.ClientSecret)" -var "acr_resource_id=$(ACR_RESOURCE_ID)"
- task: AzureCLI@2
  displayName: Install Fluxctl
  inputs:
    azureSubscription: 'nebbia-partner-service-connection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -e #stop script on first error

      CLUSTER_NAME=$(cat $(TerraformCluster.jsonOutputVariablesPath) | jq '.cluster_name.value' -r)
      RESOURCE_GROUP_NAME=$(cat $(TerraformCluster.jsonOutputVariablesPath) | jq '.resource_group_name.value' -r)
      
      echo "installing fluxctl"
      sudo snap install fluxctl --classic

      echo "acquiring credentials for cluster"
      az aks get-credentials -n $CLUSTER_NAME -g $RESOURCE_GROUP_NAME

      echo "ensuring flux namespace exists"
      kubectl apply -f k8s/flux.yml

      echo "installing flux. adding fluxcd helm repo"
      helm repo add fluxcd https://charts.fluxcd.io

      echo "installing flux. installing the main operator"
      
      helm upgrade -i flux fluxcd/flux \
        --set git.url=$(ManifestsRepoUrl) \
        --set git.path=$(ManifestsRepoK8sDirectory) \
        --namespace flux \
        --wait

      echo "installing flux. installing the helm operator"
      helm upgrade -i helm-operator fluxcd/helm-operator \
        --set git.ssh.secretName=flux-git-deploy \
        --namespace flux \
        --wait \
        --set helm.versions=v3 \
        --set configureRepositories.enable=true \
        --set configureRepositories.repositories[0].name=$(ACR.Name),configureRepositories.repositories[0].url=$(ACR.Url),configureRepositories.repositories[0].username=$(KubernetesServicePrincipal.ClientId),configureRepositories.repositories[0].password=$(KubernetesServicePrincipal.ClientSecret)
      
      echo "acquiring public ssh key for flux"
      STAGING_SSH_PUBLIC_KEY=$(fluxctl identity --k8s-fwd-ns flux)
      echo "##vso[task.setvariable variable=Staging.Flux.SshPublicKey;issecret=true]$STAGING_SSH_PUBLIC_KEY"
  continueOnError: false
- task: TerraformTaskV1@0
  displayName: "Terraform Init - Manifests"
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'nebbia-partner-service-connection'
    backendAzureRmResourceGroupName: $(TerraformBackend.ResourceGroup)
    backendAzureRmStorageAccountName: $(TerraformBackend.StorageAccount)
    backendAzureRmContainerName: '$(TerraformBackend.ContainerName)'
    backendAzureRmKey: 'manifests-repo/terraform.tfstate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/iac/global/manifests-repo/'
- task: TerraformTaskV1@0
  displayName: "Terraform Plan - Manifests"
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/iac/global/manifests-repo/'
    environmentServiceNameAzureRM: 'nebbia-partner-service-connection'
    commandOptions: |
      -var "staging_ssh_public_key=$(Staging.Flux.SshPublicKey)" -var "github_token=$(GitHub.fgauna12.PersonalAccessToken)"
- task: TerraformTaskV1@0
  displayName: "Terraform Apply - Manifests"
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/iac/global/manifests-repo/'
    environmentServiceNameAzureRM: 'nebbia-partner-service-connection'
    commandOptions: |
      -var "staging_ssh_public_key=$(Staging.Flux.SshPublicKey)" -var "github_token=$(GitHub.fgauna12.PersonalAccessToken)"
  continueOnError: true
- bash: |
    set -e

    echo "installing linkerd"
    # Specify the Linkerd version that will be leveraged throughout these instructions
    LINKERD_VERSION=$(LinkerdVersion)

    curl -sLO "https://github.com/linkerd/linkerd2/releases/download/$LINKERD_VERSION/linkerd2-cli-$LINKERD_VERSION-linux"

    sudo cp ./linkerd2-cli-$LINKERD_VERSION-linux /usr/local/bin/linkerd
    sudo chmod +x /usr/local/bin/linkerd

    FLUX_NAMESPACE=$(kubectl get ns -o json | jq '.items[].metadata.name | select(.=="flux")')
    if [ -z "$FLUX_NAMESPACE" ]
    then
      echo "Linkerd not installed. Installing Linkerd"
      echo "Running pre-checks with Linkerd"
      linkerd check --pre

      echo "Installing Linkerd"
      linkerd install | kubectl apply -f -
    else 
      echo "Linkerd already installed"
    fi
    echo "Checking installation"
    linkerd check
  continueOnError: false
    
      