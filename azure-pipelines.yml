# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables: 
 - name: TerraformBackend.ResourceGroup
   value: rg-realworld-staging-001
 - name: TerraformBackend.StorageAccount
   value: strwstagingterraform01
 - name: TerraformBackend.ContainerName
   value: staging
 - group: 'staging'
steps:
- task: AzureCLI@2
  inputs:
    azureSubscription: 'nebbia-partner-service-connection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az group create --location eastus --name $(TerraformBackend.ResourceGroup)
      
      az storage account create --name $(TerraformBackend.StorageAccount) --resource-group $(TerraformBackend.ResourceGroup) --location eastus --sku Standard_LRS
      
      az storage container create --name $(TerraformBackend.ContainerName) --account-name $(TerraformBackend.StorageAccount)

      STORAGE_ACCOUNT_KEY=$(az storage account keys list -g $(TerraformBackend.ResourceGroup) -n $(TerraformBackend.StorageAccount) | jq ".[0].value" -r)

      echo "setting storage account key variable"
      echo "##vso[task.setvariable variable=ARM_ACCESS_KEY;issecret=true]$STORAGE_ACCOUNT_KEY"
- task: TerraformInstaller@0
  inputs:
    terraformVersion: '0.12.20'
- task: HelmInstaller@1
  inputs:
    helmVersionToInstall: 'latest'
- task: TerraformTaskV1@0
  displayName: "Terraform Init"
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'nebbia-partner-service-connection'
    backendAzureRmResourceGroupName: $(TerraformBackend.ResourceGroup)
    backendAzureRmStorageAccountName: $(TerraformBackend.StorageAccount)
    backendAzureRmContainerName: '$(TerraformBackend.ContainerName)'
    backendAzureRmKey: 'infrastructure/terraform.tfstate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/iac/staging'
- task: TerraformTaskV1@0
  name: TerraformOutput
  displayName: "Terraform Apply Cluster Module"
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/iac/staging/'
    environmentServiceNameAzureRM: 'nebbia-partner-service-connection'
    commandOptions: |
      -target=module.cluster -var "aks_service_principal_client_id=$(KubernetesServicePrincipal.ClientId)" -var "aks_service_principal_client_secret=$(KubernetesServicePrincipal.ClientSecret)"
- task: TerraformTaskV1@0
  displayName: "Terraform Apply Cluster GitOps"
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/iac/staging/'
    environmentServiceNameAzureRM: 'nebbia-partner-service-connection'
    commandOptions: |
      -target=module.gitops -var "aks_service_principal_client_id=$(KubernetesServicePrincipal.ClientId)" -var "aks_service_principal_client_secret=$(KubernetesServicePrincipal.ClientSecret)"
- task: AzureCLI@2
  displayName: Install Fluxctl
  inputs:
    azureSubscription: 'nebbia-partner-service-connection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      CLUSTER_NAME=$(cat $(TerraformOutput.jsonOutputVariablesPath) | jq '.cluster_name.value' -r)
      RESOURCE_GROUP_NAME=$(cat $(TerraformOutput.jsonOutputVariablesPath) | jq '.resource_group_name.value' -r)
      
      echo "installing fluxctl"
      sudo snap install fluxctl --classic
      echo "acquiring credentials for cluster"
      az aks get-credentials -n $CLUSTER_NAME -g $RESOURCE_GROUP_NAME
      echo "acquiring public ssh key for flux"
      fluxctl identity --k8s-fwd-ns flux
      IDENTITY=$(fluxctl identity --k8s-fwd-ns flux)
      echo "identity is $IDENTITY"